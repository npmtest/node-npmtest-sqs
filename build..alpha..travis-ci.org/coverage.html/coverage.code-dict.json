{"/home/travis/build/npmtest/node-npmtest-sqs/test.js":"/* istanbul instrument in package npmtest_sqs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sqs/lib.npmtest_sqs.js":"/* istanbul instrument in package npmtest_sqs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sqs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sqs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sqs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sqs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sqs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sqs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sqs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sqs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sqs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sqs.__dirname + '/lib.npmtest_sqs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sqs/node_modules/sqs/index.js":"var request = require('request');\nvar crypto = require('crypto');\nvar qs = require('querystring');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events')\n\nvar SIGNATURE_METHOD  = 'HmacSHA256';\nvar SIGNATURE_VERSION = '2';\nvar SIGNATURE_TTL = 150*1000;\nvar VERSION = '2012-11-05';\nvar DEFAULT_REGION = 'us-east-1';\n\nvar text = function(xml, tag) {\n\tvar i = xml.indexOf('<'+tag+'>');\n\tif (i === -1) return null;\n\ti += tag.length+2;\n\n\treturn xml.substring(i, xml.indexOf('</', i));\n};\n\nvar unscape = function(xml) {\n\treturn xml.replace(/&quot;/g, '\"').replace(/$apos;/g, \"'\").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');\n};\n\nvar range = function(num) {\n\treturn Array(num).join(',').split(',');\n};\n\nmodule.exports = function(options) {\n\toptions = options || {};\n\n\toptions.access = options.access || process.env.SQS_ACCESS_KEY || process.env.AWS_ACCESS_KEY_ID;\n\toptions.secret = options.secret || process.env.SQS_SECRET_KEY || process.env.AWS_SECRET_ACCESS_KEY;\n\toptions.region = options.region || process.env.SQS_REGION || process.env.AWS_REGION || DEFAULT_REGION;\n\toptions.raw = options.raw || false;\n\toptions.proxy = options.proxy || false;\n\n\tif (!options.access || !options.secret) throw new Error('options.access and options.secret are required');\n\n\tvar queues = {};\n\tvar closed = false;\n\tvar proto = options.https ? 'https://' : 'http://';\n\n\tvar host = 'sqs.'+options.region+'.amazonaws.com';\n\tif (options.proxy) host = options.proxy;\n\n\tvar namespace = options.namespace ? options.namespace+'-' : '';\n\n\tnamespace = namespace.replace(/[^a-zA-Z0-9]/g, '-').replace(/\\-+/g, '-');\n\n\tvar queryURL = function(action, path, params) {\n\t\tparams = params || {};\n\n\t\tparams.Action = action;\n\t\tparams.AWSAccessKeyId = options.access;\n\t\tparams.SignatureMethod = SIGNATURE_METHOD;\n\t\tparams.SignatureVersion = SIGNATURE_VERSION;\n\t\tparams.Expires = new Date(Date.now()+SIGNATURE_TTL).toISOString();\n\t\tparams.Version = VERSION;\n\n\t\tvar stringToSign = 'GET\\n'+host+'\\n'+path+'\\n'+Object.keys(params).sort().map(function(name) {\n\t\t\treturn name+'='+encodeURIComponent(params[name]).replace(/[!'()]/g, escape).replace(/\\*/g, '%2A');\n\t\t}).join('&');\n\n\t\tparams.Signature = crypto.createHmac('sha256',options.secret).update(stringToSign).digest('base64');\n\n\t\treturn proto+host+path+'?'+qs.stringify(params);\n\t};\n\n\tvar retry = function(req, url, callback) {\n\t\tvar retries = 0;\n\t\tvar action = function() {\n\t\t\treq(url, {timeout:10000}, function(err, res) {\n\t\t\t\tif (!err && res.statusCode >= 500) err = new Error('invalid status-code: '+res.statusCode);\n\t\t\t\tif (callback) return callback(err);\n\t\t\t\tif (!err) return;\n\t\t\t\tretries++;\n\t\t\t\tif (retries > 15) return that.emit('error', new Error('could not send '+url));\n\t\t\t\tsetTimeout(action, retries*1000);\n\t\t\t});\n\t\t};\n\n\t\taction();\n\t};\n\n\tvar queueURL = function(name, callback) {\n\t\tif (queues[name]) return queues[name](callback);\n\n\t\tvar stack = [callback];\n\n\t\tqueues[name] = function(callback) {\n\t\t\tstack.push(callback);\n\t\t};\n\n\t\tvar onresult = function(err, url) {\n\t\t\tif (err) return that.emit('error', err);\n\n\t\t\tqueues[name] = function(callback) {\n\t\t\t\tcallback(url);\n\t\t\t};\n\n\t\t\twhile (stack.length) {\n\t\t\t\tstack.shift()(url);\n\t\t\t}\n\t\t};\n\n\t\trequest(queryURL('CreateQueue', '/', {QueueName:name}), function(err) {\n\t\t\tif (err) return onresult(err);\n\t\t\trequest(queryURL('GetQueueUrl', '/', {QueueName:name}), function(err, res) {\n\t\t\t\tif (err || res.statusCode !== 200) {\n\t\t\t\t\tvar errMessage = res.body ? text(res.body, 'Message') : '';\n\t\t\t\t\treturn onresult(err || new Error('invalid status code from GetQueueUrl: '+res.statusCode +\n\t\t\t\t\t\t\t(errMessage? '. '+errMessage : '') ));\n\t\t\t\t}\n\t\t\t\tonresult(null, '/'+text(res.body, 'QueueUrl').split('/').slice(3).join('/'));\n\t\t\t});\n\t\t});\n\t};\n\n\tvar that = new events.EventEmitter();\n\n\tthat.push = function(name, message, callback) {\n\t\tname = namespace+name;\n\n\t\tqueueURL(name, function(url) {\n\t\t\tvar body = options.raw ? message : JSON.stringify(message);\n\t\t\tretry(request, queryURL('SendMessage', url, {MessageBody: body}), callback);\n\t\t});\n\t};\n\n\tthat.delete = that.del = function(name, callback) {\n\t\tname = namespace+name;\n\n\t\tqueueURL(name, function(url) {\n\t\t\tretry(request, queryURL('DeleteQueue', url), callback);\n\t\t});\n\t};\n\n\tvar wait = options.wait || 2000;\n\n\tthat.pull = function(name, workers, onmessage) {\n\t\tif (typeof workers === 'function') return that.pull(name, options.workers || 1, workers);\n\n\t\tname = namespace+name;\n\n\t\tvar agent =  options.https ? new https.Agent({maxSockets:workers}) : new http.Agent({maxSockets:workers}); // long poll should use its own agent\n\t\tvar req = request.defaults({agent:agent});\n\n\t\trange(workers).forEach(function() {\n\t\t\tvar next = function() {\n\t\t\t\tif (closed) return;\n\n\t\t\t\tqueueURL(name, function(url) {\n\t\t\t\t\treq(queryURL('ReceiveMessage', url, {WaitTimeSeconds:20}), function(err, res) {\n\t\t\t\t\t\tif (err || res.statusCode !== 200) return setTimeout(next, wait);\n\n\t\t\t\t\t\tvar body = text(res.body, 'Body');\n\n\t\t\t\t\t\tif (!body) return options.wait ? setTimeout(next, wait) : next();\n\n\t\t\t\t\t\tvar receipt = text(res.body, 'ReceiptHandle');\n\n\t\t\t\t\t\ttry {\n              body = options.raw ? unscape(body) : JSON.parse(unscape(body));\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\treturn next();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Callback takes an arbitrary error and a `stop` attribute to stop\n\t\t\t\t\t\t// polling for messages\n\t\t\t\t\t\tonmessage(body, function(err, ctx) {\n\t\t\t\t\t\t\tif (err) return next();\n\t\t\t\t\t\t\tretry(request, queryURL('DeleteMessage', url, {ReceiptHandle:receipt}));\n\t\t\t\t\t\t\tif (ctx && ctx.stop === true) return;\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tnext();\n\t\t});\n\t};\n\n\tthat.close = function() {\n\t\tclosed = true;\n\t};\n\n\treturn that;\n};\n"}